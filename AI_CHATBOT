# Import necessary libraries
import random
import string
import warnings
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.stem import WordNetLemmatizer

# Ignore any warnings for cleaner output
warnings.filterwarnings('ignore')

# Download NLTK data files if you haven't already
nltk.download('punkt', quiet=True)
nltk.download('wordnet', quiet=True)

# Read the data for the chatbot responses
with open('studentassistance.txt', 'r', encoding='utf8', errors='ignore') as fin:
    raw = fin.read().lower()

# Tokenize the text into sentences and words
sentTokens = nltk.sent_tokenize(raw)
wordTokens = nltk.word_tokenize(raw)

# Initialize the lemmatizer for processing words
lemmer = WordNetLemmatizer()

# Function to lemmatize tokens
def lemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]

# Prepare to remove punctuation from input
removePunctDict = dict((ord(punct), None) for punct in string.punctuation)

# Normalize the text by converting to lower case and removing punctuation
def lemNormalize(text):
    return lemTokens(nltk.word_tokenize(text.lower().translate(removePunctDict)))

# Define greetings and responses for a friendly start
greetingInputs = ("hello", "hi", "greetings", "hey", "whats up")
greetingResponses = [
    "Hello! How can I help you with your studies today?",
    "Hi there! What information do you need?",
    "Greetings! I'm here to assist with any questions you have."
]

# Function to respond to greetings
def greeting(sentence):
    for word in sentence.split():
        if word.lower() in greetingInputs:
            return random.choice(greetingResponses)

# Responses tailored for student queries
additionalResponses = {
    "how to apply for a technical course": "Visit the official Department of Technical Education website for application details.",
    "what are the eligibility criteria": "Eligibility criteria vary by course. Let me know the specific course you're interested in!",
    "tell me about scholarship programs": "There are various scholarships available. Check the official site for details.",
    "what is the admission process": "The process usually includes an online application and may involve entrance exams.",
    "where can I find study materials": "Study materials can be found on the department's website and various educational platforms.",
    "what are the job prospects after graduation": "Job prospects depend on the course, but many graduates find opportunities in both public and private sectors.",
    "how can I contact the faculty": "You can find contact information on the official website or through the institution's directory.",
    "what courses are offered": "The department offers a variety of technical courses. If you have a specific field in mind, let me know!",
    "what is the exam schedule": "The exam schedule is available on the official website. It's the best place for the latest updates.",
    "how can I improve my skills": "Consider joining workshops or online courses to build your skills further.",
    "what is the importance of internships": "Internships provide hands-on experience, which is invaluable when you enter the job market.",
}

# Generate a response based on user input
def generateResponse(userResponse):
    sentTokens.append(userResponse)  # Add user's response to the token list
    tfidfVec = TfidfVectorizer(tokenizer=lemNormalize, stop_words='english')
    tfidf = tfidfVec.fit_transform(sentTokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx = vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    reqTfidf = flat[-2]
    
    if reqTfidf == 0:
        return "I'm sorry, I didn't quite get that."
    else:
        return sentTokens[idx]

# Function to save chat history to a file
def saveChatHistory(userInput, assistantResponse):
    with open("chathistory.txt", "a") as file:
        file.write(f"You: {userInput}\nAssistant: {assistantResponse}\n\n")

# Main loop for chatting with the user
flag = True
print("Assistant: Hi! I'm your AI Student Assistant. How can I help you today? (Type 'Bye' to exit.)")
while flag:
    userResponse = input("You: ").lower()
    
    if userResponse != 'bye':
        if userResponse in ('thanks', 'thank you'):
            flag = False
            print("Assistant: You're welcome! Feel free to reach out if you have more questions.")
        else:
            if greeting(userResponse) is not None:
                print("Assistant: " + greeting(userResponse))
            else:
                assistantResponse = generateResponse(userResponse)
                print("Assistant: " + assistantResponse)
                saveChatHistory(userResponse, assistantResponse)
    else:
        flag = False
        print("Assistant: Goodbye! I'm here whenever you need assistance.")
